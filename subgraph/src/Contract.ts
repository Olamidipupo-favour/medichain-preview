import { BigInt } from "@graphprotocol/graph-ts"; // Import BigInt for handling large integers

// Import necessary event classes generated by The Graph based on your smart contract ABI
import {
  BatchCreated,
  BatchUpdated,
  TemperatureExceeded,
} from "../generated/Contract/Contract";

// Import the entity classes generated from your schema.graphql
import { Batch, TemperatureEvent } from "../generated/schema";

// Function to handle BatchCreated events
export function handleBatchCreated(event: BatchCreated): void {
  // Create a new Batch entity using the event ID, converted to a hex string
  let batch = new Batch(event.params.id.toHex());
  batch.manufacturer = event.params.manufacturer; // Set the manufacturer from the event
  batch.manufactureDate = event.params.manufactureDate; // Set manufactureDate as BigInt from the event
  batch.expiryDate = event.params.expiryDate; // Set expiryDate as BigInt from the event
  batch.status = batch.status; // Set the status from the event
  batch.save(); // Save the new entity
}

// Function to handle BatchUpdated events
export function handleBatchUpdated(event: BatchUpdated): void {
  // Load the existing Batch entity using the event ID
  let batch = Batch.load(event.params.id.toHex());
  if (batch != null) {
    batch.status = event.params.status; // Update the status
    batch.save(); // Save the updated entity
  }
}

// Function to handle TemperatureExceeded events
export function handleTemperatureExceeded(event: TemperatureExceeded): void {
  // Create a new TemperatureEvent entity using a unique ID
  let temperatureEvent = new TemperatureEvent(
    event.transaction.hash.toHex() + "-" + event.logIndex.toString()
  );
  temperatureEvent.batchId = event.params.id.toHex(); // Set the batch ID
  temperatureEvent.temperature = event.params.temperature; // Set temperature as BigInt from the event
  temperatureEvent.timestamp = event.block.timestamp; // Set timestamp as BigInt from the event
  temperatureEvent.save(); // Save the new entity
}
